{"version":3,"sources":["../src/SearchContext.jsx"],"names":["React","createContext","useReducer","useMemo","useEffect","PropTypes","useLocation","useHistory","useIsFirstRender","BOOLEAN_FILTERS","SEARCH_FACET_FILTERS","refinementsReducer","setMultipleRefinementsAction","paramsToObject","stringifyRefinements","updateRefinementsFromQueryParams","SearchContext","getRefinementsToSet","queryParams","activeFacetAttributes","refinementsToSet","Object","entries","forEach","key","value","includes","valueAsArray","split","SearchData","children","searchFacetFilters","trackingName","refinementsFromQueryParams","dispatch","search","history","URLSearchParams","map","filter","attribute","newQueryString","refinementsWithJoinedLists","isFirstRender","push","defaultProps","propTypes","node","isRequired","arrayOf","shape","string","title","isSortedAlphabetical","bool"],"mappings":"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","sourcesContent":["import React, {\n  createContext, useReducer, useMemo, useEffect,\n} from 'react';\nimport PropTypes from 'prop-types';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { useIsFirstRender } from '@edx/frontend-enterprise-utils';\n\nimport { BOOLEAN_FILTERS, SEARCH_FACET_FILTERS } from './data/constants';\nimport { refinementsReducer } from './data/reducer';\nimport { setMultipleRefinementsAction } from './data/actions';\nimport { paramsToObject, stringifyRefinements, updateRefinementsFromQueryParams } from './data/utils';\n\nexport const SearchContext = createContext();\nexport const getRefinementsToSet = (queryParams, activeFacetAttributes) => {\n  const refinementsToSet = {};\n\n  Object.entries(queryParams).forEach(([key, value]) => {\n    if (activeFacetAttributes.includes(key)) {\n      const valueAsArray = value.includes(',') ? value.split(',') : [value];\n      refinementsToSet[key] = valueAsArray;\n    } else if (BOOLEAN_FILTERS.includes(key)) {\n      // convert a string into a number (this should be a 1 or 0)\n      refinementsToSet[key] = +value;\n    } else {\n      refinementsToSet[key] = value;\n    }\n  });\n  return refinementsToSet;\n};\n\nconst SearchData = ({ children, searchFacetFilters, trackingName }) => {\n  const [refinementsFromQueryParams, dispatch] = useReducer(\n    refinementsReducer,\n    {},\n  );\n\n  const { search } = useLocation();\n  const history = useHistory();\n\n  const queryParams = useMemo(() => paramsToObject(new URLSearchParams(search)), [search]);\n  useEffect(() => {\n    const activeFacetAttributes = searchFacetFilters.map(filter => filter.attribute);\n    const refinementsToSet = getRefinementsToSet(queryParams, activeFacetAttributes);\n    dispatch(setMultipleRefinementsAction(refinementsToSet));\n  }, [search]);\n\n  const newQueryString = useMemo(() => {\n    const refinementsWithJoinedLists = updateRefinementsFromQueryParams(refinementsFromQueryParams);\n    return stringifyRefinements(refinementsWithJoinedLists);\n  }, [refinementsFromQueryParams]);\n\n  const isFirstRender = useIsFirstRender();\n\n  useEffect(() => {\n    if (!isFirstRender) {\n      history.push({ search: newQueryString });\n    }\n  }, [newQueryString]);\n\n  const value = useMemo(\n    () => ({\n      refinementsFromQueryParams,\n      dispatch,\n      searchFacetFilters,\n      trackingName,\n    }),\n    [refinementsFromQueryParams, dispatch, searchFacetFilters, trackingName],\n  );\n\n  return (\n    <SearchContext.Provider value={value}>{children}</SearchContext.Provider>\n  );\n};\n\nSearchData.defaultProps = {\n  searchFacetFilters: SEARCH_FACET_FILTERS,\n  trackingName: null,\n};\n\nSearchData.propTypes = {\n  children: PropTypes.node.isRequired,\n  searchFacetFilters: PropTypes.arrayOf(PropTypes.shape({\n    attribute: PropTypes.string.isRequired,\n    title: PropTypes.string.isRequired,\n    isSortedAlphabetical: PropTypes.bool,\n  })),\n  trackingName: PropTypes.string,\n};\n\nexport default SearchData;\n"],"file":"SearchContext.js"}