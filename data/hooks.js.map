{"version":3,"sources":["../../src/data/hooks.js"],"names":["useMemo","isNull","useActiveRefinementsByAttribute","items","refinementsFromQueryParamsByAttribute","refinements","forEach","facet","attribute","useActiveRefinementsAsFlatArray","refinementsFromQueryParamsAsFlatArray","Object","entries","key","value","updatedValue","map","item","push","useNbHitsFromSearchResults","searchResults","nbHits","getCatalogString","catalogs","catalogFilterReducer","result","catalog","index","isLastCatalog","length","query","reduce"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,SAASC,MAAT,QAAuB,gCAAvB;AAEA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACC,KAAD,EAAW;AACxD,MAAMC,qCAAqC,GAAGJ,OAAO,CACnD,YAAM;AACJ,QAAMK,WAAW,GAAG,EAApB;AACAF,IAAAA,KAAK,CAACG,OAAN,CAAc,UAACC,KAAD,EAAW;AACvB,UAAQC,SAAR,GAAsBD,KAAtB,CAAQC,SAAR;AACAH,MAAAA,WAAW,CAACG,SAAD,CAAX,GAAyBD,KAAK,CAACJ,KAA/B;AACD,KAHD;AAIA,WAAOE,WAAP;AACD,GARkD,EASnD,CAACF,KAAD,CATmD,CAArD;AAYA,SAAOC,qCAAP;AACD,CAdM;AAgBP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMK,+BAA+B,GAAG,SAAlCA,+BAAkC,CAACN,KAAD,EAAW;AACxD,MAAMC,qCAAqC,GAAGF,+BAA+B,CAACC,KAAD,CAA7E;AAEA,MAAMO,qCAAqC,GAAGV,OAAO,CACnD,YAAM;AACJ,QAAMK,WAAW,GAAG,EAApB;AACAM,IAAAA,MAAM,CAACC,OAAP,CAAeR,qCAAf,EAAsDE,OAAtD,CAA8D,gBAAkB;AAAA;AAAA,UAAhBO,GAAgB;AAAA,UAAXC,KAAW;;AAC9E,UAAMC,YAAY,GAAGD,KAAK,CAACE,GAAN,CAAU,UAACC,IAAD;AAAA,+CAC1BA,IAD0B;AAE7BT,UAAAA,SAAS,EAAEK;AAFkB;AAAA,OAAV,CAArB;AAIAR,MAAAA,WAAW,CAACa,IAAZ,OAAAb,WAAW,qBAASU,YAAT,EAAX;AACD,KAND;AAOA,WAAOV,WAAP;AACD,GAXkD,EAYnD,CAACD,qCAAD,CAZmD,CAArD;AAeA,SAAOM,qCAAP;AACD,CAnBM;AAqBP,OAAO,IAAMS,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACC,aAAD,EAAmB;AAC3D,MAAMC,MAAM,GAAGrB,OAAO,CACpB,YAAM;AACJ,QAAIoB,aAAa,IAAI,CAACnB,MAAM,CAACmB,aAAa,CAACC,MAAf,CAA5B,EAAoD;AAClD,aAAOD,aAAa,IAAIA,aAAa,CAACC,MAAtC;AACD;;AACD,WAAO,IAAP;AACD,GANmB,EAOpB,CAACD,aAAD,CAPoB,CAAtB;AAUA,SAAOC,MAAP;AACD,CAZM;AAcP,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD,EAAc;AAC5C,WAASC,oBAAT,CAA8BC,MAA9B,EAAsCC,OAAtC,EAA+CC,KAA/C,EAAsD;AACpD,QAAMC,aAAa,GAAGD,KAAK,KAAKJ,QAAQ,CAACM,MAAT,GAAkB,CAAlD;AACA,QAAIC,KAAK,aAAML,MAAN,sCAAwCC,OAAxC,CAAT;;AACA,QAAI,CAACE,aAAL,EAAoB;AAClBE,MAAAA,KAAK,IAAI,MAAT;AACD;;AACD,WAAOA,KAAP;AACD;;AAED,SAAOP,QAAQ,CAACQ,MAAT,CAAgBP,oBAAhB,EAAsC,EAAtC,CAAP;AACD,CAXM","sourcesContent":["import { useMemo } from 'react';\nimport { isNull } from '@edx/frontend-enterprise-utils';\n\n/**\n   * Transforms items into an object with a key for each facet attribute\n   * with a list of that facet attribute's active selection(s).\n   */\nexport const useActiveRefinementsByAttribute = (items) => {\n  const refinementsFromQueryParamsByAttribute = useMemo(\n    () => {\n      const refinements = {};\n      items.forEach((facet) => {\n        const { attribute } = facet;\n        refinements[attribute] = facet.items;\n      });\n      return refinements;\n    },\n    [items],\n  );\n\n  return refinementsFromQueryParamsByAttribute;\n};\n\n/**\n   * Transforms refinementsFromQueryParamsByAttribute into a flat array of objects,\n   * each with an attribute key so we can still associate which attribute\n   * a refinement is for.\n   */\nexport const useActiveRefinementsAsFlatArray = (items) => {\n  const refinementsFromQueryParamsByAttribute = useActiveRefinementsByAttribute(items);\n\n  const refinementsFromQueryParamsAsFlatArray = useMemo(\n    () => {\n      const refinements = [];\n      Object.entries(refinementsFromQueryParamsByAttribute).forEach(([key, value]) => {\n        const updatedValue = value.map((item) => ({\n          ...item,\n          attribute: key,\n        }));\n        refinements.push(...updatedValue);\n      });\n      return refinements;\n    },\n    [refinementsFromQueryParamsByAttribute],\n  );\n\n  return refinementsFromQueryParamsAsFlatArray;\n};\n\nexport const useNbHitsFromSearchResults = (searchResults) => {\n  const nbHits = useMemo(\n    () => {\n      if (searchResults && !isNull(searchResults.nbHits)) {\n        return searchResults && searchResults.nbHits;\n      }\n      return null;\n    },\n    [searchResults],\n  );\n\n  return nbHits;\n};\n\nexport const getCatalogString = (catalogs) => {\n  function catalogFilterReducer(result, catalog, index) {\n    const isLastCatalog = index === catalogs.length - 1;\n    let query = `${result}enterprise_catalog_uuids:${catalog}`;\n    if (!isLastCatalog) {\n      query += ' OR ';\n    }\n    return query;\n  }\n\n  return catalogs.reduce(catalogFilterReducer, '');\n};\n"],"file":"hooks.js"}