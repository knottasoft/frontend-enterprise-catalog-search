{"version":3,"sources":["../../src/data/utils.js"],"names":["sortItemsByLabelAsc","items","sort","a","b","label","localeCompare","updateRefinementsFromQueryParams","refinements","refinementsWithJoinedLists","Object","entries","forEach","key","value","newValue","Array","isArray","join","stringifyRefinements","refinementString","URLSearchParams","toString","replace","paramsToObject","result","hasFeatureFlagEnabled","featureFlag","searchParams","window","location","search","features","split","includes"],"mappings":";;;;;;;;;;;;AAAA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAsB,CAAAC,KAAK;AAAA,SAAIA,KAAK,CAACC,IAAN,CAAW,UAACC,CAAD,EAAIC,CAAJ;AAAA,WAAUD,CAAC,CAACE,KAAF,CAAQC,aAAR,CAAsBF,CAAC,CAACC,KAAxB,CAAV;AAAA,GAAX,CAAJ;AAAA,CAAjC;AAEP,OAAO,IAAME,gCAAgC,GAAG,SAAnCA,gCAAmC,CAACC,WAAD,EAAiB;AAC/D,MAAMC,0BAA0B,GAAG,EAAnC;AACAC,EAAAA,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BI,OAA5B,CAAoC,gBAAkB;AAAA;AAAA,QAAhBC,GAAgB;AAAA,QAAXC,KAAW;;AACpD,QAAIC,QAAQ,GAAGD,KAAf;;AACA,QAAIE,KAAK,CAACC,OAAN,CAAcH,KAAd,CAAJ,EAA0B;AACxBC,MAAAA,QAAQ,GAAGD,KAAK,CAACI,IAAN,CAAW,GAAX,CAAX;AACD;;AACDT,IAAAA,0BAA0B,CAACI,GAAD,CAA1B,GAAkCE,QAAlC;AACD,GAND;AAQA,SAAON,0BAAP;AACD,CAXM;AAaP,OAAO,SAASU,oBAAT,CAA8BX,WAA9B,EAA2C;AAChD,MAAIY,gBAAgB,GAAG,IAAIC,eAAJ,CAAoBb,WAApB,EAAiCc,QAAjC,EAAvB,CADgD,CAEhD;;AACA,MAAIF,gBAAJ,EAAsB;AACpBA,IAAAA,gBAAgB,GAAGA,gBAAgB,CAACG,OAAjB,CAAyB,MAAzB,EAAiC,KAAjC,CAAnB;AACD;;AACD,SAAOH,gBAAP;AACD;AAED,OAAO,SAASI,cAAT,CAAwBb,OAAxB,EAAiC;AACtC,MAAMc,MAAM,GAAG,EAAf;AACAd,EAAAA,OAAO,CAACC,OAAR,CAAgB,UAACE,KAAD,EAAQD,GAAR,EAAgB;AAC9BY,IAAAA,MAAM,CAACZ,GAAD,CAAN,GAAcC,KAAd;AACD,GAFD;AAGA,SAAOW,MAAP;AACD;AAED,OAAO,SAASC,qBAAT,CAA+BC,WAA/B,EAA4C;AACjD,MAAMC,YAAY,GAAG,IAAIP,eAAJ,CAAoBQ,MAAM,CAACC,QAAP,CAAgBC,MAApC,CAArB;;AACA,wBAAqBP,cAAc,CAACI,YAAD,CAAnC;AAAA,MAAQI,QAAR,mBAAQA,QAAR;;AACA,SAAOA,QAAQ,IAAIA,QAAQ,CAACC,KAAT,CAAe,GAAf,EAAoBC,QAApB,CAA6BP,WAA7B,CAAnB;AACD","sourcesContent":["export const sortItemsByLabelAsc = items => items.sort((a, b) => a.label.localeCompare(b.label));\n\nexport const updateRefinementsFromQueryParams = (refinements) => {\n  const refinementsWithJoinedLists = {};\n  Object.entries(refinements).forEach(([key, value]) => {\n    let newValue = value;\n    if (Array.isArray(value)) {\n      newValue = value.join(',');\n    }\n    refinementsWithJoinedLists[key] = newValue;\n  });\n\n  return refinementsWithJoinedLists;\n};\n\nexport function stringifyRefinements(refinements) {\n  let refinementString = new URLSearchParams(refinements).toString();\n  // URLSearchParams won't encode spaces contained within individual refinements- ie `Computer Science`\n  if (refinementString) {\n    refinementString = refinementString.replace(/[+]/g, '%20');\n  }\n  return refinementString;\n}\n\nexport function paramsToObject(entries) {\n  const result = {};\n  entries.forEach((value, key) => {\n    result[key] = value;\n  });\n  return result;\n}\n\nexport function hasFeatureFlagEnabled(featureFlag) {\n  const searchParams = new URLSearchParams(window.location.search);\n  const { features } = paramsToObject(searchParams);\n  return features && features.split(',').includes(featureFlag);\n}\n"],"file":"utils.js"}